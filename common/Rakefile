#!/usr/bin/env ruby
#
# Module workflow tool, used mostly during development
#
module_name = Dir.pwd.split('/')[-1]

if module_name == "common"
  puts "Don't rake in the common directory."
  exit 1
end

def findModulePath()
  f = File.open('/etc/puppet/puppet.conf')
  f.each  do |line|
    #split everything based on a comment
    token = line.split('#')
    # given only string context before a '#', find module path
    return token[0].split('=')[1].strip if token[0] =~ /modulepath/
    return ""
  end
end
moddir = []
module_dir = ""
# Push local module directory on stack first
moddir.push(File.expand_path(File.dirname('../..')))
ENV['FACTERLIB']="#{moddir}/#{module_name}/lib"
moddir.push(findModulePath)
module_dir += "--modulepath=" if moddir.size() > 1
moddir.each do |mod|
  module_dir += "#{mod}:"
end
module_dir.chomp!(':')
dirs = [ 'manifests', 'files', 'templates' , 'tests', 'doc', 'lib' ] 

desc "The default task, which currently just calls test."
task :default  => :test do
   #puts "rsync -axm --exclude=Rakefile * #{module_dir}#{module_name}"
   #sh "rsync -axm * #{module_dir}#{module_name}"
end

desc "Creates the setup and directory structure"
task :setup => :dirs do
end

desc "Create the directory structure for a basic module."
task :dirs do
  puts "Creating Local Directory Setup"
  d = dirs.join(' ')
  sh "mkdir -p #{d} ; touch manifests/init.pp tests/do.pp tests/undo.pp"

end

desc "Run puppet in noop mode and check for syntax errors."
task :validate do
   Dir['manifests/**/*.pp'].each do |path|
     sh   "puppet --noop --parseonly #{path}"
   end
end

desc "Run puppet locally to test the current module using the tests/test.pp file."
task :test => :validate do 
   puts "FACTERLIB=#{ENV['FACTERLIB']}"
   sh   "puppet #{module_dir} --verbose tests/test.pp"
end

task :do => :validate do
   sh "puppet #{module_dir} --verbose tests/do.pp"
end

task :undo => :validate do
   sh "puppet #{module_dir} --verbose tests/undo.pp"
end

desc "Clean up cruft and remove generated documentation."
task :clean do
   dirs.each do |d| 
     if File.exists?(d) and Dir["#{d}/*"].empty?
       Dir.rmdir(d)
     end
   end

   Dir['doc/*'].each do |file|
     File.delete(file)
   end
   Dir.rmdir('doc') if File.exists?('doc') 

   Dir['graph/*'].each do |file|
     File.delete(file)
   end
   Dir.rmdir('graph') if File.exists?('graph') 
end

desc "Generate puppetdoc for manifests in the manifests directory."
task :doc do
  FileUtils.mkdir_p('doc')
  Dir['manifests/*'].each do |path|
    fname = path.chomp(File.extname(path)).gsub('manifests/', '')
    sh "puppetdoc #{path} > doc/#{module_name}_#{fname}.txt"
  end
end

desc "Create a module RPM"
task :rpm do 
  puts "I didn't do this part yet."
end

desc "Create a SRPM"
task :srpm do
  puts "I didn't do this part yet."
end

desc "Create a tarball for distribution"
task :tarball do
  puts "I didn't do this part yet."
end

desc "Create a deb package for distribution"
task :deb do
  puts "I didn't do this part yet."
end

desc "Generate the graph --> requires graphviz"
task :graph do 
  FileUtils.mkdir_p('graph')
  sh "puppet  --noop #{module_dir} --graph --graphdir=graph  tests/test.pp"
  Dir['graph/*'].each do |infile|
    fname = infile.chomp(File.extname(infile)).gsub('graph/', '')
    sh "dot -Tpng #{infile} >  graph/#{fname}.png"
  end
end

desc "Visualize Graph --> Requires firefox"
task :showgraph do 
  sh "firefox graph/resources.png"
end
